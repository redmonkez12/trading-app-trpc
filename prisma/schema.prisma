generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Positions     Positions[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Markets {
  id     String   @id @default(cuid())
  name   Market
  Assets Assets[]
}

enum Market {
  FOREX
  STOCKS
  COMMODITIES
  CRYPTO
}

model Assets {
  id        String      @id @default(cuid())
  name      String
  ticker    String      @unique
  image     String
  marketId  String
  market    Markets     @relation(fields: [marketId], references: [id], onDelete: Cascade)
  Positions Positions[]
}

model Positions {
  id           String   @id @default(cuid())
  openPrice    Decimal
  closePrice   Decimal
  openTime     DateTime @db.Timestamptz
  closeTime    DateTime @db.Timestamptz
  positionSize Decimal
  userId       String
  assetId      String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset        Assets   @relation(fields: [assetId], references: [id], onDelete: Cascade)
}
